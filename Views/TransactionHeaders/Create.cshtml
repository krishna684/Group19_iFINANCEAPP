@model Group19_iFINANCEAPP.Models.TransactionHeader

@{
    ViewBag.Title = "Create Transaction";
    var masterAccounts = ViewBag.MasterAccounts as List<SelectListItem>;
}

@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger">
        <h5 class="mb-2">⚠️ Please fix the following errors:</h5>
        <ul>
            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
            {
                <li>@error.ErrorMessage</li>
            }
        </ul>
    </div>
}

<h2>Create Transaction</h2>

@using (Html.BeginForm("Create", "TransactionHeaders", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="card shadow mb-4">
        <div class="card-header bg-primary text-white">Transaction Header</div>
        <div class="card-body">
            <div class="form-group mb-2">
                @Html.LabelFor(m => m.ID)
                @Html.TextBoxFor(m => m.ID, new { @class = "form-control", @readonly = "readonly" })
            </div>
            <div class="form-group mb-2">
                @Html.LabelFor(m => m.Date)
                @Html.TextBoxFor(m => m.Date, "{0:yyyy-MM-dd}", new { @class = "form-select", type = "date" })
            </div>
            <div class="form-group mb-2">
                @Html.LabelFor(m => m.Description)
                @Html.TextAreaFor(m => m.Description, new { @class = "form-select", rows = 3 })
            </div>
        </div>
    </div>

    <div class="card shadow mb-4">
        <div class="card-header bg-secondary text-white">Transaction Lines</div>
        <div class="card-body">
            <table class="table table-dark table-striped table-hover rounded shadow-sm overflow-hidden">
                <thead class="table-light text-dark">
                    <tr>
                        <th>Account</th>
                        <th>Debit</th>
                        <th>Credit</th>
                        <th>Comment</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody id="lineItems"></tbody>
            </table>
            <button type="button" class="btn btn-outline-primary mt-2" onclick="addLine()">➕ Add Line</button>
        </div>
    </div>

    <div class="text-end mt-3">
        <input type="submit" value="Submit" class="btn btn-success" />
        @Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-secondary ms-2" })
    </div>
}

@section Scripts {
    <script>
        let lineIndex = 0;
        const masterAccounts = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.MasterAccounts));

        function addLine() {
            const options = masterAccounts.map(a =>
                `<option value="${a.Value}">${a.Text}</option>`).join('');

            const row = `
                <tr>
                    <td>
                        <select name="Lines[${lineIndex}].AccountID" class="form-select" required>
                            <option value="">Select Account</option>
                            ${options}
                        </select>
                    </td>
                    <td><input type="number" name="Lines[${lineIndex}].DebitedAmount" value="0" class="form-control" step="0.01" min="0" /></td>
                    <td><input type="number" name="Lines[${lineIndex}].CreditedAmount" value="0" class="form-control" step="0.01" min="0" /></td>
                    <td><input type="text" name="Lines[${lineIndex}].Comments" class="form-control" /></td>
                    <td><button type="button" class="btn btn-danger btn-sm" onclick="this.closest('tr').remove()">✖</button></td>
                </tr>`;
            document.getElementById("lineItems").insertAdjacentHTML('beforeend', row);
            lineIndex++;
        }
    </script>
}
